# make_samples_npy.py
import numpy as np

# --- 32-sample flattened float32 array (length 64) ---
samples32 = np.array([
 -0.40345673,  0.78177920,
 -0.45489109,  0.48161451,
 -0.07029468,  0.40401786,
  0.10571373,  0.22053096,
  0.35629245,  0.17791162,
 -0.21176908,  0.11485578,
 -0.01289985, -0.13373334,
  0.24085257,  0.37545538,
  0.01277885, -0.13282755,
 -0.54872225,  0.46492818,
 -0.26867742, -0.64955174,
  0.07908733,  0.10637377,
  0.31998745,  0.12735192,
  0.02040356, -0.30583144,
 -0.21287700, -0.59540682,
  0.09347401,  0.31693607,
  0.07182864,  0.22063420,
 -0.28046029,  0.09051824,
 -0.05371336, -0.34042857,
  0.54135443, -0.17925449,
  0.21391437, -0.48786769,
 -0.21652124, -0.15121582,
  0.35954587,  0.31812415,
 -0.06316645, -0.26865742,
 -0.30068146, -0.21769902,
  0.59047863,  0.24018593,
  0.05284662, -0.47760713,
 -0.90970449,  0.12926938,
  0.14866597,  0.20101078,
 -0.79150928, -0.34391164,
  0.09255986, -0.97925605
], dtype=np.float32)

# --- 64-sample flattened float32 array (length 128) ---
samples64 = np.array([
 -0.64144267,  0.49076528,
 -0.16410049, -0.12979349,
 -0.12936872,  0.24029179,
  0.22002062, -0.06912256,
  0.17691124, -0.39319692,
  0.01364099,  0.32050178,
  0.51131324,  0.10459906,
  0.51732530, -0.10317130,
 -0.28786886,  0.22529747,
  0.05288252,  0.23993729,
 -0.13985391,  0.40704578,
 -0.38064418, -0.31999913,
  0.41039513,  0.11801045,
  0.17170340, -0.33209534,
 -0.21120910, -0.11049192,
 -0.09722112, -0.24845158,
 -0.02717889,  0.11064830,
  0.12076044,  0.49765014,
  0.38288574, -0.18768465,
 -0.07743964, -0.45195441,
  0.33113399, -0.04326305,
  0.40303000,  0.24336452,
 -0.03116134, -0.16964474,
 -0.57521783, -0.13758196,
  0.05121927,  0.53737526,
  0.16551276,  0.04217386,
  0.04870974, -0.05088544,
  0.16148192, -0.01567331,
 -0.28421172,  0.04213439,
 -0.37708092,  0.18529782,
  0.21830073,  0.11045664,
  0.16004366, -0.26931240,
 -0.06310959,  0.00526145,
 -0.04402107,  0.37103926,
  0.39796494, -0.09325246,
  0.00125288, -0.32195673,
 -0.20660924, -0.25780936,
  0.26114429,  0.38961051,
 -0.05920258,  0.42469182,
 -0.01587267,  0.20241034,
  0.08721166, -0.07915329,
  0.15809081, -0.49226340,
 -0.18811994,  0.16548713,
  0.37733580, -0.22674269,
 -0.11257104, -0.00559854,
  0.30251644,  0.35016755,
  0.00906825,  0.53907028,
 -0.05846798, -0.09002177,
  0.07254185, -0.17994624,
  0.12260837,  0.03497339,
 -0.21198882, -0.48167674,
  0.29695721, -0.20292662,
  0.13640260,  0.05925246,
  0.20630049, -0.13024641,
 -0.03930466, -0.01170939,
 -0.00398276,  0.27935211,
 -0.39059235, -0.26092432,
  0.16882731,  0.07969119
], dtype=np.float32)

# --- 128-sample flattened float32 array (length 256) ---
samples128 = np.array([
  0.19947679, -0.28770561,
  0.44437533, -0.24625929,
  0.24133128, -0.18875402,
  0.35749671, -0.26882397,
  0.60389364, -0.10689385,
 -0.01285078,  0.41577484,
  0.41952379,  0.24681656,
  0.41785251, -0.15661149,
  0.21129866, -0.17823401,
  0.24484929, -0.21114116,
  0.45163888, -0.21716303,
  0.04821998,  0.27662321,
 -0.09285166,  0.32155541,
 -0.01346890, -0.20095716,
 -0.03304285, -0.46589269,
  0.23430057,  0.22067686,
 -0.18134600, -0.28114145,
  0.13592873,  0.28836877,
  0.08149951,  0.01397695,
  0.05026656,  0.33308806,
 -0.05295115, -0.39407674,
 -0.10208343,  0.41506180,
 -0.32133368, -0.16841590,
 -0.15864060, -0.13443744,
  0.20627507, -0.10712311,
 -0.16968317,  0.27870223,
  0.03739395, -0.05002475,
  0.27666393,  0.26060795,
  0.06046555, -0.01399830,
  0.00935572, -0.36322087,
 -0.04647611,  0.14462610,
  0.25606045, -0.18531859,
 -0.02868765,  0.17792296,
  0.09367749,  0.27510514,
  0.07487649, -0.11030474,
  0.50138554,  0.16721073,
 -0.08518409, -0.29357135,
 -0.10473624, -0.09882383,
 -0.11155883, -0.46345735,
  0.29707513, -0.11437085,
  0.06231023, -0.03008542,
  0.16604505, -0.00843993,
  0.00574761, -0.52052001,
 -0.18870405,  0.09419754,
  0.27374804,  0.03123869,
 -0.02673035,  0.29766214,
  0.27966758, -0.09739557,
  0.09327214, -0.27036034,
 -0.06691564, -0.16621667,
 -0.19737440,  0.10731265,
  0.10099873,  0.19628151,
 -0.07441551,  0.06963223,
  0.21100040,  0.17015106,
 -0.01480156, -0.24105328,
 -0.15713049, -0.12199369,
  0.26473241,  0.25773554,
 -0.09302353,  0.02289147,
  0.03023703,  0.07185342,
  0.14070104, -0.10838020,
  0.04617875, -0.11085620,
  0.07340049, -0.24806031,
 -0.00790426,  0.20596745,
 -0.02421978,  0.28168048,
  0.04004478,  0.12299599,
  0.03404004,  0.07043036,
  0.06123536, -0.06391381,
 -0.28262343, -0.27049084,
  0.36764892, -0.08559206,
  0.07818828,  0.07919871,
  0.12093555, -0.04362586,
  0.06288778, -0.25933057,
  0.16739013,  0.10141249,
 -0.05092155,  0.10795653,
  0.00160325, -0.16389735,
  0.06057859,  0.05240008,
  0.03635232,  0.06697155,
 -0.13015810,  0.23214509,
  0.12177961, -0.16337666,
  0.18495516, -0.27455621,
  0.04700977, -0.25875531,
 -0.03160838, -0.20759976,
 -0.04190024,  0.29386037,
  0.08925439,  0.05014949,
  0.14995837,  0.09016754,
  0.07680745,  0.03640505,
 -0.05221034, -0.49649340,
  0.09402522, -0.25950460,
  0.27290425,  0.19722909,
  0.20842827,  0.03661109,
  0.05733862, -0.08464598,
  0.15437429, -0.14159417,
  0.20502813,  0.25941187,
  0.06654039, -0.06782333,
  0.26236528,  0.12574814,
  0.05245099, -0.12899600,
  0.35545512,  0.29858781,
  0.32543682,  0.05898695,
  0.23908674, -0.09228690,
  0.19536010, -0.13668172,
  0.57945469,  0.26630308,
  0.51912242,  0.06530569,
  0.72788547,  0.39413256,
  0.76202584,  0.57117944,
  0.90646339,  0.04110506
], dtype=np.float32)
"""
# Save to .npy files in the current directory
np.save("samples32.npy", samples32)
np.save("samples64.npy", samples64)
np.save("samples128.npy", samples128)

# Optional: save them together
np.savez("samples_all.npz", samples32=samples32, samples64=samples64, samples128=samples128)

print("Saved samples32.npy ({} floats)".format(samples32.size))
print("Saved samples64.npy ({} floats)".format(samples64.size))
print("Saved samples128.npy ({} floats)".format(samples128.size))
print("Saved samples_all.npz")
"""